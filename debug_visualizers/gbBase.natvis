<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="Ghulbus::Allocator::AllocationStrategy::Monotonic&lt;*&gt;">
    <DisplayString>{{ available: {m_storage.size - m_offset}/{m_storage.size}, mock {m_storage.ptr} }}</DisplayString>
  </Type>

  <Type Name="Ghulbus::Allocator::AllocationStrategy::Stack&lt;*&gt;::Header">
    <DisplayString>{{ previous={(Header*)(m_data &amp; ~(uintptr_t(0x01)))}, wasFreed={((m_data &amp; 0x01) != 0)} }}</DisplayString>
    <Expand>
      <Item Name="previousHeader">(Header*)(m_data &amp; ~(uintptr_t(0x01)))</Item>
      <Item Name="wasFreed">((m_data &amp; 0x01) != 0)</Item>
    </Expand>
  </Type>

  <Type Name="Ghulbus::Allocator::AllocationStrategy::Stack&lt;*&gt;">
    <DisplayString>{{ available: {m_storage.size - m_freeMemoryOffset}/{m_storage.size}, mock {m_storage.ptr} }}</DisplayString>
    <Expand>
      <Item Name="storage">m_storage.ptr</Item>
      <Item Name="total">m_storage.size</Item>
      <Item Name="free">m_storage.size - m_freeMemoryOffset</Item>
      <Synthetic Name="allocations">
        <Expand>
          <LinkedListItems>
            <HeadPointer>m_topHeader</HeadPointer>
            <NextPointer>(Header*)(m_data &amp; ~(uintptr_t(0x01)))</NextPointer>
            <ValueNode Name="free: {((m_data &amp; 0x01) != 0)}">((std::byte*)this + 1)</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="Ghulbus::Allocator::AllocationStrategy::Ring&lt;*&gt;::Header">
    <DisplayString>{{ next={((Header*)m_data[0])}, previous={(Header*)(m_data[1] &amp; ~(uintptr_t(0x01)))}, wasFreed={((m_data[1] &amp; 0x01) != 0)} }}</DisplayString>
    <Expand>
      <Item Name="nextHeader">((Header*)m_data[0])</Item>
      <Item Name="previousHeader">(Header*)(m_data[1] &amp; ~(uintptr_t(0x01)))</Item>
      <Item Name="wasFreed">((m_data[1] &amp; 0x01) != 0)</Item>
    </Expand>
  </Type>

  <Type Name="Ghulbus::Allocator::AllocationStrategy::Ring&lt;*&gt;">
    <DisplayString>{{ total: {m_storage.size}, mock {m_storage.ptr} }}</DisplayString>
    <Expand>
      <Item Name="storage">m_storage.ptr</Item>
      <Item Name="total">m_storage.size</Item>
      <Item Name="offset">m_freeMemoryOffset</Item>
      <Item Name="wrapped">(m_bottomHeader &gt; m_topHeader)</Item>
      <Synthetic Name="allocations">
        <Expand>
          <CustomListItems Condition="m_topHeader != nullptr">
            <Variable Name="memBase" InitialValue="m_storage.ptr"/>
            <Variable Name="memEnd" InitialValue="(m_bottomHeader &gt; m_topHeader) ? ((std::byte*)m_bottomHeader) : (m_storage.ptr + m_freeMemoryOffset)"/>
            <Variable Name="bufferEnd" InitialValue="m_storage.ptr + m_storage.size"/>
            <Variable Name="itHeader" InitialValue="m_bottomHeader"/>
            <Variable Name="distanceToNext" InitialValue="0"/>
            <Variable Name="nElements" InitialValue="0"/>
            <Loop Condition="itHeader != nullptr">
              <Exec Condition="itHeader->m_data[0] != 0">distanceToNext = (((std::byte*)itHeader->m_data[0]) - ((std::byte*)itHeader))</Exec>
              <Exec Condition="itHeader->m_data[0] == 0">distanceToNext = (memEnd - ((std::byte*)itHeader))</Exec>
              <Item Name="free: {(itHeader->m_data[1] &amp; 0x01) == 0x01}, offset: {((std::byte*)itHeader) - memBase}, size: {((distanceToNext&lt;0) ? (bufferEnd - ((std::byte*)itHeader)) : distanceToNext)}">((std::byte*)itHeader + 1)</Item>
              <Exec>itHeader = ((Header*)itHeader->m_data[0])</Exec>
              <Exec>nElements++</Exec>
            </Loop>
            <Item Name="[number of allocations]">nElements</Item>
          </CustomListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="Ghulbus::Allocator::AllocationStrategy::Pool&lt;*&gt;::Header">
    <DisplayString>{{ isFree={((m_data &amp; 0x01) != 0)}, nextFree={(Header*)(m_data &amp; ~(uintptr_t(0x01)))} }}</DisplayString>
    <Expand>
      <Item Name="isFree">((m_data &amp; 0x01) != 0)</Item>
      <Item Name="nextFreeHeader">(Header*)(m_data &amp; ~(uintptr_t(0x01)))</Item>
    </Expand>
  </Type>

  <Type Name="Ghulbus::Allocator::AllocationStrategy::Pool&lt;*&gt;">
    <DisplayString>blub</DisplayString>
    <Expand>
      <Item Name="storage">m_storage.ptr</Item>
      <Item Name="total">m_storage.size</Item>
      <Item Name="chunk size">m_chunkSize</Item>
      <Item Name="first free">m_firstFree</Item>
      <Synthetic Name="chunks">
        <DisplayString>{{size = {m_storage.size / (m_chunkSize + sizeof(Header))}}}</DisplayString>
        <Expand>
          <CustomListItems>
            <Variable Name="memBase" InitialValue="m_storage.ptr"/>
            <Variable Name="chunkSize" InitialValue="m_chunkSize + sizeof(Header)"/>
            <Variable Name="nChunks" InitialValue="m_storage.size / (m_chunkSize + sizeof(Header))"/>
            <Variable Name="i" InitialValue="0"/>
            <Variable Name="freeChunks" InitialValue="0"/>
            <Loop Condition="i &lt; nChunks">
              <Item Name="[{i}]">(Header*)(memBase + i*chunkSize)</Item>
              <Exec Condition="(((Header*)(memBase + i*chunkSize))->m_data &amp; 0x01) != 0">++freeChunks</Exec>
              <Exec>++i</Exec>
            </Loop>
            <Item Name="free">freeChunks</Item>
          </CustomListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="free chunks">
        <Expand>
          <LinkedListItems>
            <HeadPointer>m_firstFree</HeadPointer>
            <NextPointer>(Header*)(m_data &amp; ~(uintptr_t(0x01)))</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
</AutoVisualizer>
